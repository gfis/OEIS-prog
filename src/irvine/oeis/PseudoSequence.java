package irvine.oeis;

import java.io.BufferedReader;
import java.io.File; // delete()
import java.io.FileInputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel; // seekable()
import java.nio.channels.ReadableByteChannel;
import java.io.IOException;
import irvine.math.z.Z;
import irvine.math.z.ZUtils;

/**
 * Produce a sequence by reading the terms from the corresponding b-file.
 * This is used mainly for testing derived sequences when the underlying
 * sequence is not yet implemented in jOEIS.
 * It is simliar to {@link PseudoSequence}, which reads from a file in the jar
 * that has no indices before the terms.
 * The input file contains lines with tuples (index, term).
 * "#" and a following comment are stripped, and blank or empty lines are ignored.
 * <code>null</code> is returned after the last term.
 * The file is expected in a directory defined by the environment variable <code>BFPATH</code>.
 * @author Georg Fischer
 */
public class PseudoSequence implements Sequence {

  final protected BufferedReader mLineReader;
  protected int mIndex; // index of current term
  
  /**
   * Construct the sequence.
   * @param aseqno A-number of the sequence to be simulated from its b-file.
   */
  public PseudoSequence(final String aseqno) {
    final String env = System.getenv("BFPATH"); // Use environment variable BFPATH if that is set
    String bFilePath = env != null ? env : "../../../OEIS-mat/common/bfile/"; 
    if (! bFilePath.endsWith("/")) {
      bFilePath += "/";
    }
    try {
      final String fileName = bFilePath + "b" + aseqno.substring(1) + ".txt";
      final ReadableByteChannel lineChannel = (new FileInputStream(fileName)).getChannel();
      mLineReader = new BufferedReader(Channels.newReader(lineChannel, "UTF-8"));
      System.out.println("fileName: " + fileName);
    } catch (Throwable exc) {
      throw new RuntimeException("cannot read b-file for " + aseqno + ": " + exc.getMessage());
    } // try
    mIndex = 0; // will be overwritten in <code>next()</code>
  }

  @Override
  public Z next() {
    try {
      while (true) {
        String line = mLineReader.readLine();
        if (line == null) { // EOF reached
          mLineReader.close();
          return null;
        } else {
          final int hashPos = line.indexOf('#');
          if (hashPos >= 0) { // hash found
            line = line.substring(0, hashPos); // remove comment
          }
          line = line.replaceAll("\\s+", " "); // beware of \t, \r whitespace
          line = line.trim(); // remove any surrounding space
          if (line.length() > 0) { // line not empty
            final int spacePos = line.indexOf(' ');
            try {
              mIndex = Integer.parseInt(line.substring(0, spacePos));
            } catch (Exception exc) {
              ++mIndex;
            }
            return new Z(line.substring(spacePos + 1));
          } // line not empty
        } // line != null
      } // while busy
    } catch (Throwable exc) {
      throw new RuntimeException("cannot read b-file: " + exc.getMessage());
    } // try
  } // next
  
  /**
   * Gets the index of the term returned by the last call of <code>next()</code>
   * @return an int index
   */
  public int getIndex() {
    return mIndex;
  }
  
  /** Reads a b-file a replciate it in b-file format
   *  @param args command line argument: A-number
   */
  public static void main(String[] args) {
    final String aseqno = args[0];
    System.out.println("# b-file for " + aseqno + " generated by irvine.oeis.PseudoSequence");
    PseudoSequence ps = new PseudoSequence(aseqno);
    Z term = null;
    while ((term = ps.next()) != null) {
      int index = ps.getIndex();
      System.out.println(String.valueOf(index) + " " + term.toString());
    }
  } // main
}

