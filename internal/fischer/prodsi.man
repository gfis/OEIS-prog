A055612	prodsib	0	Binomial.binomial(mN, m).add(1)	for (int m = 1; m <= mN; ++m) {		a(n) = Product_{m=1..n} (binomial(n,m)+1).
A064320	prodsib	1	Z.valueOf(j).pow(Binomial.binomial(mN - 1, j - 1))	for (int j = 1; j <= mN; ++j) {		a(n) = Product_{j=1..n} j^C(n-1,j-1).
A071248	prodsi	1	Z.valueOf(mN).lcm(Z.valueOf(k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} lcm(n,k).
A085521	prodsi	0	Z.ONE.shiftLeft(2 * k + 1).add(1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (2^(2k+1)+1).
A097476	prodsif	1	FACTORIAL.factorial(2 * i).square()	for (int i = 0; i <= mN - 1; ++i) {		a(n) = Product_{i=0..n-1} ((2i)!)^2.
A098694	prodsif	0	FACTORIAL.factorial(2 * k)	for (int k = 1; k <= mN; ++k) {		Double-superfactorials: a(n) = Product_{k=1..n} (2k)!.
A103639	prodsi	0	Z.valueOf(2 * i + 1)	for (int i = 1; i <= 2 * mN; ++i) {		a(n) = Product_{i=1..2n} 2*i+1.
A107252	prodsif	0	FACTORIAL.factorial(mN + k).divide(FACTORIAL.factorial(k + 1))	for (int k = 0; k <= mN - 1; ++k) {		a(n) = Product_{k=0..n-1} (n+k)!/(k+1)!.
A119619	prodsi	1	Z.valueOf(i).divide(Z.valueOf(i).gcd(Z.valueOf(mN)))	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} i / gcd(i,n).
A127553	prodsi	1	Z.valueOf(k).lcm(Z.valueOf(mN)).divide(Z.valueOf(k).gcd(Z.valueOf(mN)))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} lcm(k,n)/gcd(k,n).

A129824	prodsib	0	Binomial.binomial(mN, k).add(1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (1 + binomial(n,k)).
A134356	prodsif	1	FACTORIAL.factorial(3 * k + 1).divide(FACTORIAL.factorial(mN + k))	for (int k = 1; k <= mN - 1; ++k) {		a(n) = Product_{k=1..n-1} (3k+1)!/(n+k)!.
A136411	prodsi	1	Z.valueOf(2 * k - 1).pow(2 * mN - 2 * k + 1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (2*k-1)^(2*n-2*k+1).
A139486	prodsi	0	Z.ONE.shiftLeft(j).add(2)	for (int j = 0; j <= mN - 1; ++j) {		a(n) = Product_{j=0..n-1} (2^j + 2).
A145119	prodsi	1	new Q(mN,k).ceiling().subtract(new Q(mN, k).ceiling().mod(Z.TWO))	for (int k = 1; k <= mN - 1; ++k) {		a(n) = Product_{k=1..n-1} (ceiling(n/k) - ceiling(n/k) mod 2).
A147630	prodsi	1	Z.valueOf(9 * k - 3)	for (int k = 1; k <= mN - 1; ++k) {		a(1) = 1; for n>1, a(n) = Product_{k = 1..n-1} (9k - 3).
A168467	prodsi	0	Z.valueOf(2 * k + 2).multiply(2 * k + 3).pow(mN - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} ((2k+2)(2k+3))^(n-k).
A207647	prodsi	0	Z.valueOf(2 * mN + 1).divide(k).subtract(1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} floor((2*n+1)/k - 1).
A224986	prodsif	1	FACTORIAL.factorial(mN - k - 2).pow(Z.valueOf(k).multiply(FACTORIAL.factorial(k)))	for (int k = 1; k <= mN - 4; ++k) {		a(n) = Product_{k=1..n-4} (n-k-2)!^(k*k!).
A255269	prodsif	1	FACTORIAL.factorial(k).pow(k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} k!^k.
A255322	prodsif	0	FACTORIAL.factorial(k*k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^2)!.
A260231	prodsi	1	Z.valueOf(k).pow(k).add(1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (1 + k^k).
A262261	prodsib	0	Binomial.binomial(4*k, k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(4*k,k).
A263394	prodsi	1	Z.THREE.pow(i).subtract(Z.ONE.shiftLeft(i))	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} (3^i - 2^i).
A263416	prodsi	0	Z.valueOf(3*k + 1).pow(mN - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (3*k+1)^(n-k).
A263417	prodsi	0	Z.valueOf(3*k + 2).pow(mN - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (3*k+2)^(n-k).
A263430	prodsi	0	Z.valueOf(4*k + 1).pow(mN - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (4*k+1)^(n-k).
A266091	prodsif	0	FACTORIAL.factorial(3*k).divide(mN + k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (3*k)!/(n+k)!.
A267968	prodsi	0	Z.valueOf(k).pow(k + 1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k = 1..n} k^(k + 1).
A268196	prodsib	0	Binomial.binomial(3*k, k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(3*k,k).

A269576	prodsi	1	Z.FOUR.pow(i).subtract(Z.THREE.pow(i))	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} (4^i - 3^i).
A269661	prodsi	1	Z.FIVE.pow(i).subtract(Z.FOUR.pow(i))	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} (5^i - 4^i).
A271266	prodsi	0	Z.valueOf(k*k + 21)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (k^2 + 21).
A271947	prodsif	0	FACTORIAL.factorial(7*k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (7*k)!.
A272093	prodsib	0	Binomial.binomial(k*mN, k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(k*n,k).
A272094	prodsib	0	Binomial.binomial(k*k, k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(k^2,k).
A272095	prodsib	0	Binomial.binomial(mN*mN, k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(n^2,k).
A272096	prodsif	0	FACTORIAL.factorial(k*mN)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k*n)!.
A272163	prodsi	1	Z.valueOf(mN*mN - k).pow(k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^2-k)^k.
A272164	prodsif	0	FACTORIAL.factorial(mN*mN - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^2-k)!.
A272165	prodsi	1	Z.valueOf(k*mN - k).pow(k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k*n-k)^k.
A272166	prodsif	0	FACTORIAL.factorial(k*mN - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k*n-k)!.
A272167	prodsi	1	Z.valueOf(k*k - k).pow(k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^2-k)^k.
A272168	prodsif	0	FACTORIAL.factorial(k*k - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^2-k)!.
A272179	prodsi	0	Z.valueOf(mN*mN - k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^2 - k).
A272180	prodsi	0	Z.valueOf(mN*mN + k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^2 + k).
A272237	prodsi	1	Z.valueOf(mN*mN + k).pow(k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^2+k)^k.
A272238	prodsif	0	FACTORIAL.factorial(mN*mN + k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^2+k)!.
A272241	prodsif	0	FACTORIAL.factorial(mN*mN + k).divide(FACTORIAL.factorial(mN*mN - k))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} ((n^2 + k)! / (n^2 - k)!).
A272244	prodsi	0	Z.valueOf(mN*mN + k*k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^2 + k^2).
A272246	prodsi	0	Z.valueOf(mN).pow(3).add(Z.valueOf(k).pow(3))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^3 + k^3).
A272247	prodsi	0	Z.valueOf(mN).pow(4).add(Z.valueOf(k).pow(4))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^4 + k^4).
A272248	prodsi	0	Z.valueOf(mN).pow(5).add(Z.valueOf(k).pow(5))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n^5 + k^5).
A274626	prodsi	0	Z.ONE.pow((mN + i)/3).subtract(1)	for (int i = 0; i <= 2; ++i) {		a(n) = Product_{i=0..2} (2^floor((n+i)/3)-1).

A277347	prodsi	1	Z.valueOf(2*k*(k - 1) + 1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (2*k*(k-1)+1).
A277355	prodsi	0	Z.ONE.shiftLeft(k).add(k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (2^k + k).
A290000	prodsi	0	Z.THREE.pow(k).add(1)	for (int k = 1; k <= mN - 1; ++k) {		a(n) = Product_{k=1..n-1} (3^k + 1).
A292687	prodsi	0	Z.FOUR.pow(Z.THREE.pow(k)).add(1)	for (int k = 0; k <= mN - 1; ++k) {		a(n) = Product_{k=0..n-1} (4^(3^k) + 1)
A294318	prodsif	0	FACTORIAL.factorial(3*k + 1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (3*k + 1)!.
A294319	prodsif	0	FACTORIAL.factorial(3*k + 2)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (3*k + 2)!.
A294320	prodsif	0	FACTORIAL.factorial(4*k + 1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (4*k + 1)!.
A294321	prodsif	0	FACTORIAL.factorial(4*k + 2)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (4*k + 2)!.
A294322	prodsif	0	FACTORIAL.factorial(4*k + 3)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (4*k + 3)!.
A294323	prodsif	0	FACTORIAL.factorial(5*k + 1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (5*k + 1)!.
A294324	prodsif	0	FACTORIAL.factorial(5*k + 2)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (5*k + 2)!.
A294325	prodsif	0	FACTORIAL.factorial(5*k + 3)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (5*k + 3)!.
A294326	prodsif	0	FACTORIAL.factorial(5*k + 4)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (5*k + 4)!.
A296589	prodsib	0	Binomial.binomial(2*mN, k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(2*n, k).
A296590	prodsib	0	Binomial.binomial(2*mN - k, k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(2*n - k, k).
A296591	prodsif	0	FACTORIAL.factorial(mN + k)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n + k)!.

A301616	prodsi	0	Z.valueOf(k*k).add(Z.valueOf(mN-k+1).square())	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (k^2+(n-k+1)^2).
A306193	prodsif	0	FACTORIAL.factorial(mN).divide(FACTORIAL.factorial(k)).add(1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (1 + n!/k!).
A306789	prodsib	0	Binomial.binomial(mN + k, mN)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} binomial(n + k, n).
A308820	prodsif	1	FACTORIAL.factorial(mN/k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} ceiling(n/k)!.
A308944	prodsi	1	Z.valueOf(mN).lcm(Z.valueOf(k)).divide(Z.valueOf(mN).gcd(Z.valueOf(k)).multiply(k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} lcm(n,k) / (k * gcd(n,k)).
A309327	prodsi	0	Z.FOUR.pow(k).add(1)	for (int k = 1; k <= mN - 1; ++k) {		a(n) = Product_{k=1..n-1} (4^k + 1).

A320345	prodsi	0	Z.valueOf(k).pow(9).add(Z.valueOf(mN-k).pow(9))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^9 + (n-k)^9).
A323496	prodsib	0	Binomial.binomial(k - 1, 3).add(Binomial.binomial(mN - k, 3))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (binomial(k-1,3) + binomial(n-k,3)).
A323497	prodsib	0	Binomial.binomial(k - 1, 4).add(Binomial.binomial(mN - k, 4))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (binomial(k-1,4) + binomial(n-k,4)).
A323533	prodsib	0	Binomial.binomial(k - 1, 5).add(Binomial.binomial(mN - k, 5))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (binomial(k-1,5) + binomial(n-k,5)).
A323534	prodsib	0	Binomial.binomial(k - 1, 6).add(Binomial.binomial(mN - k, 6))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (binomial(k-1,6) + binomial(n-k,6)).
A323535	prodsib	0	Binomial.binomial(k - 1, 7).add(Binomial.binomial(mN - k, 7))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (binomial(k-1,7) + binomial(n-k,7)).
A323538	prodsib	0	Binomial.binomial(k - 1, 8).add(Binomial.binomial(mN - k, 8))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (binomial(k-1,8) + binomial(n-k,8)).
A323540	prodsi	0	Z.valueOf(k*k).add(Z.valueOf(mN-k).pow(2))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^2 + (n-k)^2).
A323541	prodsi	0	Z.valueOf(k).pow(3).add(Z.valueOf(mN-k).pow(3))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^3 + (n-k)^3).
A323542	prodsi	0	Z.valueOf(k).pow(4).add(Z.valueOf(mN-k).pow(4))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^4 + (n-k)^4).
A323543	prodsi	0	Z.valueOf(k).pow(5).add(Z.valueOf(mN-k).pow(5))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^5 + (n-k)^5).
A323544	prodsi	0	Z.valueOf(k).pow(6).add(Z.valueOf(mN-k).pow(6))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^6 + (n-k)^6).
A323545	prodsi	0	Z.valueOf(k).pow(7).add(Z.valueOf(mN-k).pow(7))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^7 + (n-k)^7).
A323546	prodsi	0	Z.valueOf(k).pow(8).add(Z.valueOf(mN-k).pow(8))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^8 + (n-k)^8).
A323575	prodsi	0	Z.valueOf(k).pow(k).add(Z.valueOf(mN-k).pow(k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (k^k + (n-k)^k).
A323588	prodsi	0	Z.valueOf(k).pow(mN).add(Z.valueOf(mN-k).pow(mN))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (k^n + (n-k)^n).
A323589	prodsi	0	Z.valueOf(k).pow(k).add(Z.valueOf(mN-k).pow(mN-k))	for (int k = 1; k <= mN - 1; ++k) {		a(n) = Product_{k=1..n-1} (k^k + (n-k)^(n-k)).
A323659	prodsi	0	Z.valueOf(k).pow(10).add(Z.valueOf(mN-k).pow(10))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^10 + (n-k)^10).
A323660	prodsi	0	Z.valueOf(k).pow(11).add(Z.valueOf(mN-k).pow(11))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^11 + (n-k)^11).
A323661	prodsi	0	Z.valueOf(k).pow(12).add(Z.valueOf(mN-k).pow(12))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^12 + (n-k)^12).
A323662	prodsi	0	Z.valueOf(k).pow(13).add(Z.valueOf(mN-k).pow(13))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^13 + (n-k)^13).
A323702	prodsif	0	FACTORIAL.factorial(k).add(FACTORIAL.factorial(mN-k))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k! + (n-k)!).
A323715	prodsi	0	Z.ONE.shiftLeft(k).add(Z.THREE.pow(k))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (2^k + 3^k).
A323716	prodsi	0	Z.THREE.pow(k).add(1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (3^k + 1).
A323717	prodsif	0	FACTORIAL.factorial(mN).add(FACTORIAL.factorial(k))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (n! + k!).
A323751	prodsi	0	Z.valueOf(k).pow(mN).add(Z.valueOf(mN-k).pow(mN))	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k^n + (n-k)^n).

A325050	prodsif	0	FACTORIAL.factorial(k).square().add(1)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0..n} (k!^2 + 1).
A335010	prodsi	1	Z.ONE.shiftLeft(k).subtract(1).pow(k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (2^k - 1)^k.
A345726	prodsi	1	Z.valueOf(k).pow((mN/k) * (mN/k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} k^(floor(n/k)^2).

A057863	prodsif	0	FACTORIAL.doubleFactorial(2 * k-1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (2k-1)!!.
A059384	prev1m	1	A059378	Z.ONE	mAn_1.multiply(mSeq.next())	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} J_5(i).
A066780	prev1m	1	A000203	Z.ONE	mAn_1.multiply(mSeq.next())	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} sigma(k); sigma(k) is the sum of the positive divisors of n.
A066843	prev1m	1	A000005	Z.ONE	mAn_1.multiply(mSeq.next())	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} d(k); d(k) is the number of positive divisors of k.
A068326	prev1m	0	A031974	Z.ONE	mAn_1.multiply(mSeq.next())	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} A031974(k).

A076265	prodsim	1	A000040	mSeq.a(i - 1).pow(mSeq.a(i - 1))	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} prime(i)^prime(i).
A076954	prodsim	0	A000040	mSeq.a(i - 1).pow(i)	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} prime(i)^i.
A082480	prodsim	0	A000045	mSeq.a(k).add(1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} (F(k)+1) where F(k) denotes the k-th Fibonacci number.
A086803	prodsim	1	A000040	mSeq.a(mN).subtract(mSeq.a(i - 1))	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=2..n} (prime(n+1)-prime(i)).
A087315	prodsim	0	A000040	mSeq.a(k - 1).pow(mSeq.a(mN - k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} prime(k)^prime(n-k+1).
A090114	prodsim	1	A000040	mSeq.a(mN - 1).subtract(j)	for (int j = 1; j <= mN; ++j) {		a(n) = Product_{j=1..n} (prime(n)-j).
A345466	prodsib	0	Binomial.binomial(mN, mN / k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} binomial(n, floor(n/k)).

A093570	prodsim	1	A000040	mSeq.a(k - 1).add(k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n}(k + prime(k)).
A099788	prodsim	0	A000040	mSeq.a(i - 1)	for (int i = 1; i <= 2 * mN; ++i) {		a(n) = Product_{i=1..2n} prime(i).
A107712	prodsim	0	A000040	mSeq.a(k + mN - 1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} prime(k+n).

# A118455	prodsim	1	A007917	mSeq.a(k - 2)	for (int k = 2; k <= mN; ++k) {		a(1)=1, a(n) = Product_{k=2..n} P(k), where P(k) is the largest prime <= k.
# A118456	prodsim	1	A007918	mSeq.a(k - 1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} P(k), where P(k) is the smallest prime >= k.
A121826	prodsim	1	A020338	mSeq.a(k - 1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} D(k), where D() are the doublets, A020338.
A125760	prodsim	0	A002109	mSeq.a(k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} A002109(k).
# nyi A129364	prodsim	1	A066841	mSeq.a(k - 1)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k = 1..n} A066841(k).

A175836	prodsim	1	A001615	mSeq.a(i - 1)	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} psi(i) where psi is the Dedekind psi function (A001615).
A181574	prodsim	1	A000005	mSeq.a(i).add(1).divide(mSeq.a(i).subtract(1))	for (int i = 2; i <= mN; ++i) {		a(n) = Product_{i=2..n} (tau(i)+1)/(tau(i)-1), where tau(.)=A000005(.).
A182484	prodsim	1	A000040	Z.valueOf(k).pow(Z.valueOf(2 * k).subtract(mSeq.a(mN - 1)).subtract(1))	for (int k = 1; k <= mSeq.a(mN - 1).intValue() - 1; ++k) {		a(n) = Product_{k=1..p-1} k^(2k-p-1), where p = prime(n).
A191554	prodsim	1	A000040	mSeq.a(k - 1).pow(Z.ONE.shiftLeft(k - 1))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} prime(k)^(2^(k-1)).
A191555	prodsim	0	A000040	mSeq.a(k - 1).pow(Z.ONE.shiftLeft(mN - k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} prime(k)^(2^(n-k)).
#----
# 2021-11-28
A061719	prodsif	0	FACTORIAL.factorial(k).pow(3)	for (int k = 0; k <= mN; ++k) {		a(n) = Product_{k=0...n} (k!^3).
A061778	prodsib	1	Binomial.binomial(mN, j)	for (int j = 0; j <= mN / 2; ++j) {		a(n) = Product_{j=0..floor(n/2)} C(n,j).
A249056	prodsi	0	Z.valueOf((2*mN - i) * (2*mN + i))	for (int i = 1; i <= mN / 2; ++i) {		a(n) = Product_{i=1..floor(n/2)} (2n-i)*(2n+i).
A254865	prodsi	1	Z.valueOf(k)	for (int k = 1 + mN - mN / 3; k <= mN; ++k) {		a(n) = Product_{k = 1+n-floor(n/3) .. n} k.
A271385	prodsi	0	Z.valueOf(mN - 2*k).pow(mN - 2*k)	for (int k = 0; k <= (mN - 1)/2; ++k) {		a(n) = Product_{k=0..floor((n - 1)/2)} (n - 2*k)^(n - 2*k).
A283361	prodsi	0	Z.valueOf((k*k) % (2*mN - 1))	for (int k = 2; k <= (mN + mN)/3; ++k) {		a(n) = Product_{k=2..floor(2*n/3} (k^2 (mod 2n-1)).
A318909	prodsi	1	Z.valueOf(k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{1<=x<=n, n|(x^2-1)} x.

A293290	prodsi2	0	Z.valueOf(k*k + j*j)	for (int k = 1; k <= mN; ++k) {	for (int j = 1; j <= k; ++j) {		a(n) = Product_{1 <= j <= k <= n} (k^2 + j^2).
A306907	prodsi2	0	Z.valueOf(j*k + 1)	for (int k = 0; k <= mN; ++k) {	for (int j = 0; j <= mN; ++j) {		a(n) = Product_{i=0..n, j=0..n, k=0..n} (i*j*k + 1).
A203511	prodsi2	0	Z.valueOf((k*(k + 1) + j*(j + 1))/2)	for (int k = 2; k <= mN; ++k) {	for (int j = 1; j <= k - 1; ++j) {		a(n) = Product_{1 <= i < j <= n} (t(i) + t(j)); t = A000217 = triangular numbers.
A140210	prodsid	1	Z.valueOf(d)	for (final Z dd : Cheetah.factor(mN).divisors()) { 	a(n) = Product_{h == 1 (mod 4) and h|n} h.
A140211	prodsid	1	Z.valueOf(d)	for (final Z dd : Cheetah.factor(mN).divisors()) { 	a(n) = Product_{d == 3 (mod 4) and d|n} d.
A140214	prodsid	1	Z.valueOf(d)	for (final Z dd : Cheetah.factor(mN).divisors()) { 	a(n) = Product_{h == 5 (mod 6) and h|n} h.

A058807	prodsi	1	irvine.math.z.Stirling.firstKind(mN, k).abs()	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} s(n,k), where s(n,k) is unsigned Stirling number of the first kind. (s(n,k) = number of permutations of n elements which contain exactly k cycles.)
A056819	prodsid	1	Z.valueOf(mN + 1 - d)	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{k|n} (n+1-k).
A061778	prodsi	1	Binomial.binomial(mN, j)	for (int j = 1; j <= mN / 2; ++j) {		a(n) = Product_{j=0..floor(n/2)} C(n,j).
A066842	prodsid	1	Z.valueOf(d).pow(d)	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{k|n} k^k; product is over the positive divisors, k, of n.
A066987	prodsi	2	irvine.factor.factor.Cheetah.factor(i).sigma().divide(irvine.factor.factor.Cheetah.factor(i).bigOmega())	for (int i = 2; i <= mN; ++i) {		a(n) = Product_{i=2..n} sigma(i)/bigomega(i).
A066988	prodsi	2	irvine.factor.factor.Cheetah.factor(i).phi().divide(irvine.factor.factor.Cheetah.factor(i).bigOmega())	for (int i = 2; i <= mN; ++i) {		a(n) = Product_{i=2..n} phi(i)/bigomega(i).
A092287	prodsi2	0	Z.valueOf(j).gcd(Z.valueOf(k))	for (int j = 1; j <= mN; ++j) {	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{j=1..n} Product_{k=1..n} gcd(j,k).
A224479	prodsi2	0	Z.valueOf(i).gcd(Z.valueOf(k))	for (int k = 1; k <= mN; ++k) {	for (int i = 1; i < k; ++i) {		a(n) = Product_{k=1..n} Product_{i=1..k-1} gcd(k,i).

A098710	prodsid	1	FACTORIAL.factorial(d)	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{k|n} k!.
A124441	prodgcd1	1	Z.valueOf(k)	for (int k = 1; k <= mN / 2; ++k) {		a(n) = Product_{1<=k<=n/2, gcd(k,n)=1} k.
A124442	prodgcd1	1	Z.valueOf(k)	for (int k = (mN + 1)/2; k <= mN; ++k) {		a(n) = Product_{ceiling(n/2) <= k <= n, gcd(k,n)=1} k.
A131553	prodgcd1	1	Z.valueOf(1 + k)	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n, gcd(k,n)=1} (1+k).
A135396	prodsid	1	FACTORIAL.factorial(mN - d)	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d divides n} (n-d)!.
# tau(k) = irvine.factor.factor.Cheetah.factor(k).sigma0() 
# sigma(k) = irvine.factor.factor.Cheetah.factor(k).sigma() 
# pod(k) = irvine.factor.factor.Cheetah.factor(k).pod() 
A206032	prodsid	1	Cheetah.factor(dd).sigma()	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d|n} sigma(d) where sigma = A000203.
A211776	prodsid	1	Cheetah.factor(dd).sigma0()	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d | n} tau(d).
A247951	prodsi	1	irvine.factor.factor.Cheetah.factor(i).sigma2()	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} sigma_2(i).
A253901	prodsid	1	FACTORIAL.factorial(d - 1).pow(Mobius.mobius(mN / d))	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d divides n} ((d-1)!)^moebius(n/d).
A250269	prodsid	1	FACTORIAL.factorial(d).pow(Mobius.mobius(mN / d))	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d divides n} ((d-1)!)^moebius(n/d).
A275786	prodsid	1	dd.add(1).multiply(dd).divide2()	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d|n} T(d) where T(x) = x*(x+1)/2 = A000217(x) = x-th triangular number.
A283616	prodsi	1	Z.valueOf(2*mN - 1).mod(Z.valueOf(2*k - 1))	for (int k = irvine.math.IntegerUtils.sqrt(2*mN-1)/2 + 1; k >= 2; --k) {		a(n) = Product_{k=2..floor(sqrt(2n-1)/2)+1} (2n-1) mod (2k-1).
A308941	prodsi	0	irvine.math.z.Stirling.firstKind(mN, k).abs().multiply(FACTORIAL.factorial(k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} |Stirling1(n,k)| * k!.
A308942	prodsi	0	irvine.math.z.Stirling.secondKind(mN, k).multiply(FACTORIAL.factorial(k))	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} Stirling2(n,k) * k!.
A308943	prodsid	1	Binomial.binomial(mN, d)	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d|n} binomial(n,d).
A309169	prodsid	1	irvine.math.z.Stirling.firstKind(mN, d).abs()	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d|n} |Stirling1(n,d)|.
A309171	prodsid	1	irvine.math.z.Stirling.secondKind(mN, d)	for (final Z dd : Cheetah.factor(mN).divisors()) {		a(n) = Product_{d|n} Stirling2(n,d).
A319761	prodsi	0	Z.valueOf(i).pow(irvine.math.z.Stirling.firstKind(mN, i).abs())	for (int i = 1; i <= mN; ++i) {		a(n) = Product_{i=1..n} i^s(n,i), where s is an unsigned Stirling number of the 1st kind.
A322672	prodsid	1	Cheetah.factor(dd).pod().divide(d)	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} (pod(d)/d) where pod(k) is the product of the divisors of k (A007955).
A324980	prodsid	1	Cheetah.factor(dd).sigma().multiply(d)	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} (d*sigma(d)) where sigma(k) = the sum of the divisors of k (A000203).
A324981	prodsid	1	Cheetah.factor(dd).pod().multiply(d)	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} (d*pod(d)) where pod(k) = the product of the divisors of k (A007955).
A324987	prodsid	1	Cheetah.factor(dd).sigma0().multiply(Cheetah.factor(dd).sigma())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} (tau(d)*sigma(d)) where tau(k) = the number of divisors of k (A000005) and sigma(k) = the sum of the divisors of k (A000203).
A325030	prodsid	1	Cheetah.factor(dd).sigma().multiply(Cheetah.factor(dd).pod())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} (sigma(d)*pod(d)) where sigma(k) = the sum of the divisors of k (A000203) and pod(k) = the product of the divisors of k (A007955).
A334491	prodsid	1	Cheetah.factor(dd).sigma().gcd(dd)	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} gcd(d, sigma(d)).
A334664	prodsid	1	Cheetah.factor(dd).sigma0().gcd(dd)	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} gcd(d, tau(d)).
A334729	prodsid	1	Cheetah.factor(dd).sigma0().gcd(Cheetah.factor(dd).sigma())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} gcd(tau(d), sigma(d)).
A334730	prodsid	1	Cheetah.factor(dd).sigma0().gcd(Cheetah.factor(dd).pod())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} gcd(tau(d), pod(d)) where tau(k) is the number of divisors of k (A000005) and pod(k) is the product of divisors of k (A007955).
A334731	prodsid	1	Cheetah.factor(dd).sigma().gcd(Cheetah.factor(dd).pod())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} gcd(sigma(d), pod(d)) where sigma(k) is the sum of divisors of k (A000203) and pod(k) is the product of divisors of k (A007955).
A334764	prodsi	1	irvine.factor.factor.Cheetah.factor(2*k - 1).sigma0()	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} d(2*k - 1), where d() is the number of divisors function A000005.
A334767	prodsi	1	irvine.factor.factor.Cheetah.factor(2*k).sigma0()	for (int k = 1; k <= mN; ++k) {		a(n) = Product_{k=1..n} d(2*k), where d() is the number of divisors function A000005.
A334795	prodsid	1	Cheetah.factor(dd).sigma0().lcm(dd)	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} lcm(d, tau(d)) where tau(k) is the number of divisors of k (A000005).
A334805	prodsid	1	Cheetah.factor(dd).sigma().lcm(dd)	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} lcm(d, sigma(d)) where sigma(k) is the sum of divisors of k (A000203).
A334806	prodsid	1	Cheetah.factor(dd).sigma0().lcm(Cheetah.factor(dd).sigma())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} lcm(tau(d), sigma(d)) where tau(k) is the number of divisors of k (A000005) and sigma(k) is the sum of divisors of k (A000203).
A334807	prodsid	1	Cheetah.factor(dd).sigma0().lcm(Cheetah.factor(dd).pod())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} lcm(tau(d), pod(d)) where tau(k) is the number of divisors of k (A000005) and pod(k) is the product of divisors of k (A007955).
A334809	prodsid	1	Cheetah.factor(dd).sigma().lcm(Cheetah.factor(dd).pod())	for (final Z dd : Cheetah.factor(mN).divisors()) {	a(n) = Product_{d|n} lcm(sigma(d), pod(d)) where sigma(k) is the sum of divisors of k (A000203) and pod(k) is the product of divisors of k (A007955).


A126675	prodsi	2	Stirling.firstKind(i, 2).abs()	for (int i = 2; i <= mN; ++i) {	Product_{i=2..n} |Stirling_1(i,2)|.	nonn,synth	2..14	nyi
A126676	prodsi	3	Stirling.firstKind(i, 3).abs()	for (int i = 3; i <= mN; ++i) {	Product_{i=3..n} |Stirling_1(i,3)|.	nonn,synth	3..14	nyi
A126677	prodsi	4	Stirling.firstKind(i, 4).abs()	for (int i = 4; i <= mN; ++i) {	Product_{i=4..n} |Stirling_1(i,4)|.	nonn,synth	4..15	nyi
A126678	prodsi	5	Stirling.firstKind(i, 5).abs()	for (int i = 5; i <= mN; ++i) {	Product_{i=5..n} |Stirling_1(i,5)|.	nonn,synth	5..15	nyi
A126679	prodsi	3	Stirling.secondKind(i, 3)	for (int i = 3; i <= mN; ++i) {	Product_{i=3..n} Stirling_2(i,3).	nonn,synth	3..16	nyi
A126680	prodsi	4	Stirling.secondKind(i, 4)	for (int i = 4; i <= mN; ++i) {	Product_{i=4..n} Stirling_2(i,4).	nonn,synth	4..16	nyi
A126681	prodsi	5	Stirling.secondKind(i, 5)	for (int i = 5; i <= mN; ++i) {	Product_{i=5..n} Stirling_2(i,5).	nonn,synth	5..16	nyi
