package irvine.oeis.$(PACK);
// Generated by $(GEN) $(CALLCODE) $(PARM1) $(PARM2) $(PARM3) $(PARM4) at $(DATE)
// DO NOT EDIT here!

import irvine.math.z.Z;
import irvine.oeis.Sequence;

/**
 * $(ASEQNO) $(NAME)
 * @author $(AUTHOR)
 */
public class $(ASEQNO) implements Sequence {
 
  private int mN;
  private Z mK;
  private String mP12;
  private String mP21;

  public $(ASEQNO) () {
	mK = Z.ZERO;
    mN = $(OFFSET);
    mP12 = String.valueOf($(PARM1)) + String.valueOf($(PARM2));
    mP21 = String.valueOf($(PARM2)) + String.valueOf($(PARM1));
  }

  @Override
  public Z next() {
    int loopCheck = 1000000;
    while (loopCheck > 0) {
      mK = mK.add(Z.ONE);
      String sta = mK.toString($(PARM3));
      String stb = mK.$(PARM4)(Z.ONE).toString($(PARM3));
      if ((sta.indexOf(mP12) >= 0 || sta.indexOf(mP21) >= 0) && 
          (stb.indexOf(mP12) < 0  && stb.indexOf(mP21) < 0 )) { // isOk
        loopCheck = -1;
      }
      loopCheck --;
    } // while busy
    mN++;
    if (loopCheck == 0) {
      System.err.println("more the 1 million iterations in $(ASEQNO)");
    }
    return mK;
  }
}
