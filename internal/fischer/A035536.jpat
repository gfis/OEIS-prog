package irvine.oeis.$(PACK);
// Generated by $(GEN) $(CALLCODE) $(OFFSET) $(PARM1)  at (DATE)
// DO NOT EDIT here!
/* 
    (maple), alois heinz:
    b := proc(n, i, c) option remember; `if`(n=0,
      `if`(c=0, 1, 0), `if`(i<1, 0, b(n, i-1, c)+
       b(n-i, min(n-i, i), c+[0, 1, -1][1+irem(i, 3)])))
    end:
    seq(b(n,n, 0), n=0..32);
__DATA__
1,0,0,2,0,0,6,0,0,14,0,0,32,0,0,66,0,0,134,0,0,256,0,0
,480,0,0,868,0,0,1540,0,0,2664,0,0,4536,0,0,7574,0,0
,12474,0,0,20234,0,0,32428,0,0,51324,0,0,80388,0,0,124582
,0,0,191310,0,0,291114,0,0,439394,0,0,657936,0,0
*/
import irvine.math.z.Z;
import irvine.oeis.Sequence;
import java.util.HashMap;
import java.lang.Exception;

/**
 * $(ASEQNO) $(NAME)
 * @author $(AUTHOR)
 */
public class $(ASEQNO) implements Sequence {

  private final HashMap<String, Z> mRemember; // simulate "option remember"
  protected int mN; // index of next term
  
  /** Construct the sequence. */
  public $(ASEQNO)() {

    mRemember = new HashMap<String, Z>(1024);
    mN = $(OFFSET) - 1;
  }
    
  protected Z partition (final Z n, final Z i, final Z c) {
    String key = n.toString() + "," + i.toString() + "," + c.toString();
    Z result = mRemember.get(key);
    if (result == null) {
        if (n.equals(Z.ZERO)) {
            result = c.equals(Z.ZERO) ? Z.ONE : Z.ZERO;
        } else {
            if (i.compareTo(Z.ONE) < 0) {
                result = Z.ZERO;
            } else {
                Z n_i = n.subtract(i);
                result = partition(n, i.subtract(Z.ONE), c)
                    .add(partition(n_i, n_i.min(i), c.add(modules(i))));
            }
        }
        mRemember.put(key, result);
    }
    return result;
  }
  
  /**
   * Determine the specific modulus condition to be applied to the partition
   * @return increment for the count 
   */
  protected Z modules(final Z i) {
    return (new Z[] { Z.ZERO, Z.ONE, Z.NEG_ONE })[i.mod(Z.THREE).intValue()];
  }
  
  /**
   * Compute the next term of the sequence
   * @return a specific number of partitions
   */
  @Override
  public Z next() {
    ++mN;
    return partition(Z.valueOf(mN), Z.valueOf(mN), Z.ZERO);
  }

  /**
   * Compute a number of terms for A035536
   * @param args number of terms
   */
  public static void main(final String[] args) {
    int termNo = 64;
    Sequence seq = new A035536();
    if (args.length > 0) {
      try {
        termNo = Integer.parseInt(args[0]);
      } catch (Exception exc) { // ignore
      }
    }
    for (int index = 0; index < termNo; ++index) {
      System.out.println(index + " " + seq.next().toString());
    }
  }
}
