#!perl

# A189011 Zero-one sequence based on triangular numbers: a(A000217(k))=a(k); a(A014132(k))=1-a(k); a(1)=0.
# @(#) $Id$
# 2021-09-16, Georg Fischer; DP=3
#
#:# Usage:
#:#     perl dersimple.pl [-d debug] [-f ofter_file] [-j] $(COMMON)/joeis_names.txt > $@.tmp 2> $@.rest.tmp
#:#     -d  debugging level (0=none (default), 1=some, 2=more)
#:#     -f  file with aseqno, offset1, terms (default $(COMMON)/joeis_ofter.txt)
#:#     -j  write *.jpat file and exit
#:# Reads ofter_file for implemented jOEIS sequences with their offsets and first terms

use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);
$timestamp = sprintf ("%04d-%02d-%02d", $year + 1900, $mon + 1, $mday);

my $debug = 0;
if (0 and scalar(@ARGV) == 0) {
    print `grep -E "^#:#" $0 | cut -b3-`;
    exit;
}
my $callcode = "A189011";
my $ofter_file = "../../../../OEIS-mat/common/joeis_ofter.txt";
my $jpat = 0;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt   =~ m{\-d}  ) {
        $debug      = shift(@ARGV);
    } elsif ($opt   =~ m{\-f}  ) {
        $ofter_file = shift(@ARGV);
    } elsif ($opt   =~ m{\-j}  ) {
        &write_jpat();
        exit();
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while options
#----------------
my ($aseqno, $bseqno, $cseqno) ;
my $offset = 1;
my $terms;
my %ofters = ();
open (OFT, "<", $ofter_file) || die "cannot read $ofter_file\n";
while (<OFT>) {
    s{\s+\Z}{};
    ($aseqno, $offset, $terms) = split(/\t/);
    $terms = $terms || "";
    if ($offset < -1) { # offsets -2, -3: strange, skip these
    } else {
        $ofters{$aseqno} = $offset; # "$offset\t$terms";
    }
} # while <OFT>
close(OFT);
print STDERR "# $0: " . scalar(%ofters) . " jOEIS offsets and some terms read from $ofter_file\n";
#----
while (<>) {
    s/\s+\Z//; # chompr
    my $line = $_;
    if ($line =~ m{Zero\-one +sequence +based +on}i) {
        ($aseqno, $bseqno, $cseqno) = ($line =~ m{(A\d\d+)}g);
        # patches:
        $bseqno =~ s{A000325}{A000326}; # error in definition
        $cseqno =~ s{A114024}{A047248}; # error in definition
        $cseqno =~ s{A026147}{A181155}; # duplicate in definition
        $cseqno =~ s{A000330}{A302058}; # not in definition
        my @inits = ($line =~ m{a\(\d+\) *\= *(\d+)[\,\.]}g);
        print join("\t", $aseqno, $callcode, 0, &oft($bseqno), &oft($cseqno), $bseqno, $cseqno, join(", ", @inits)) . "\n";
    }
} # while
#----
sub oft {
    my ($sno) = @_;
    my $result = 1;
    if (defined($ofters{$sno})) {
        $result = $ofters{$sno};
    } else {
        print "# $aseqno: $sno undefined\n"
    };
} # oft
#----
sub write_jpat {
    print <<'GFis';
package irvine.oeis.$(PACK);
// Generated by $(GEN) $(CALLCODE) at $(DATE)

import irvine.oeis.a189.A189011;

/**
 * $(ASEQNO) $(NAME)
 * @author $(AUTHOR)
 */
public class $(ASEQNO) extends $(CALLCODE) {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(PARM1), $(PARM2), new $(PARM3)(), new $(PARM4)(), $(PARM5));
  }
}
GFis
} # write_jpat
__DATA__
A189138: a(1)=0 -> 1

