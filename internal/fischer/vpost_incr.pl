#!perl

# Check whether data are increasing
# 2020-08-29, Georg Fischer
#
#:# Usage:
#:#   perl vpost_incr.pl input > output
#--------------------------------------------------------
use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);
# $timestamp = sprintf ("%04d-%02d-%02d", $year + 1900, $mon + 1, $mday);

my $debug = 0;
my $nparm = 4; # counted from 1
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{d}) {
        $debug     = shift(@ARGV);
    } elsif ($opt  =~ m{n}) {
        $nparm     = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

my $line = "";
my  ($aseqno, $offset, $termlist);
print join("\t", "A-number", "Non-increasing terms") ."\n";
while (<>) {
    s/\s+\Z//; # chompr
    $line = $_;
    ($aseqno, $offset, $termlist) = split(/\t/, $line);
    my @terms = split(/\,/, $termlist);
    my $prev = shift(@terms);
    my $ofs = $offset + 1;
    my $termno = scalar(@terms);
    my $ind = 0;
    my $error = "";
    my $busy = 1;
    my $errcount = 0;
    while ($busy && $ind < $termno) {
        if ($ind <= 4) {
            # ignore non-monotony at the beginning
        } elsif (&compare($prev, $terms[$ind]) >= 0) {
            $error .= "a(" . ($ofs - 1) . ")=$prev>=$terms[$ind] ";
            $errcount ++;
            if ($errcount >= 4) {
                $error .= "... (maybe more)";
                $busy = 0;
            }
        }
        $prev = $terms[$ind];
        $ofs ++;
        $ind ++;
    } # while $ind
    if ($error ne "") {
        print "$aseqno\t$error\n";
    }
} # while <>

sub compare {
    my ($old, $new) = @_;
    my $result = 1;
    if (length($new) > length($old)) {
        $old = ("0" x (length($new) - length($old))) . $old; # prefix zeroes
    }
    if ($old lt $new) {
        $result = -1;
    } elsif ($old eq $new) {
        $result = 0;
    } else { # already set
    }
    return $result;
} # compare
#================================
__DATA__
A077307	1,1,1,5,5,5,5,5,17,17,17,29,29,29,29,29,35,35,35,35,47,47,47,47,47,71,71,71,87,87,87,87,87,99,99,99,123,123,123,123,123,147,147,147,159,159,159,159,159,167,167,167,191,191,191,191,191,239,239,239,275,275,275,275,275,281,281,281,293
A101357	0,1,3,9,25,60,126,238,414,675,1045,1551,2223,3094,4200,5580,7276,9333,11799,14725,18165,22176,26818,32154,38250,45175,53001,61803,71659,82650,94860,108376,123288,139689,157675,177345,198801,222148,247494
A108895	1,2,4,7,11,16,28,49,81,126,246,477,861,1446,3126,6591,12735,22680,52920,118755,241635,450480,1115760,2629965,5579085,10800210,28097490,68981025,151556385,302969010,821887410,2089276995,4731688515
A111043	1,37,38,102,102,111,120,201,265,329,378,394,475,539,620,636,700,716,780,784,784,800,825,889,925,989,998,1014,1023,1059,1084,1120,1129,1193,1194,1195,1244,1293,1297,1297,1306,1306,1387,1388,1437,1518,1582,1582
A111096	16,232,59281,10059281,4049575228945,1950244643588320,30041944445326335483061,32095019157463691981298869,142108579247039194637916834814494
A115606	0,43,104,177,256,353,456,607,770,943,1136,1359,1588,1829,2100,2377,2660,2973,3304,3653,4020,4393,4776,5173,5594,6027,6466,6923,7386,7909,8456,9049,9650,10257,10870,11489,12132,12793,13466,14157,14866,15593
A116689	0,1,21,105,325,780,1596,2926,4950,7875,11935,17391,24531,33670,45150,59340,76636,97461,122265,151525,185745,225456,271216,323610,383250,450775,526851,612171,707455,813450,930930,1060696,1203576,1360425
A116911	5,17,4957,129277,2826443,3861083,5126483,9451573,19811083,53751743,68136617,98729003,264616831,388771421,498157871,608312141,682548511,779346653,918754301,1174179079,1700023891,2056298683,2149703411
A116994	3,1759,3323,469303,605113,641969,1110587,1426669,11148289,18352349,20473721,21820391,24710753,30048589,36690923,40785301,97060681,155135369,160593239,168132247,361391623,377965069,416572171,645803201
